// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProjectManager.Models.Database;

#nullable disable

namespace ProjectManager.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241127044946_Bak")]
    partial class Bak
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.0");

            modelBuilder.Entity("ProjectManager.Models.Database.Client", b =>
                {
                    b.Property<int>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("ClientId");

                    b.Property<string>("Address1")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Address1");

                    b.Property<string>("Address2")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Address2");

                    b.Property<string>("ClientName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("ClientName");

                    b.Property<string>("Contact")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Contact");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Email");

                    b.Property<string>("Fax")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Fax");

                    b.Property<int>("Phone")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Phone");

                    b.HasKey("ClientId");

                    b.ToTable("Client");
                });

            modelBuilder.Entity("ProjectManager.Models.Database.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("CommentId");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Content");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("CreateAt");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("UpdateAt");

                    b.HasKey("CommentId");

                    b.ToTable("comment");
                });

            modelBuilder.Entity("ProjectManager.Models.Database.Issue_type", b =>
                {
                    b.Property<int>("TYPE_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("type_id");

                    b.Property<string>("DESCRIPTION")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<string>("ISSUE_TYPE")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("issue_type");

                    b.HasKey("TYPE_ID");

                    b.ToTable("Issue_type");
                });

            modelBuilder.Entity("ProjectManager.Models.Database.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("NotificationId");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("CreateAt");

                    b.Property<bool>("IsRead")
                        .HasColumnType("INTEGER")
                        .HasColumnName("IsRead");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Message");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Type");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("UserId");

                    b.HasKey("NotificationId");

                    b.ToTable("notification");
                });

            modelBuilder.Entity("ProjectManager.Models.Database.Permission", b =>
                {
                    b.Property<int>("PermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("PermissionId");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("CreateAt");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Description");

                    b.Property<string>("PermissionName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("PermissionName");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("UpdateAt");

                    b.HasKey("PermissionId");

                    b.ToTable("permission");
                });

            modelBuilder.Entity("ProjectManager.Models.Database.Priority", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("TEXT")
                        .HasColumnName("ID");

                    b.Property<string>("Priority_Level")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Priority_Level");

                    b.HasKey("ID");

                    b.ToTable("Priority");
                });

            modelBuilder.Entity("ProjectManager.Models.Database.Project", b =>
                {
                    b.Property<string>("ProjectId")
                        .HasColumnType("TEXT")
                        .HasColumnName("ProjectId");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("CategoryId");

                    b.Property<int>("ClientId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ClientId");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("CreateAt");

                    b.Property<DateTime>("DeliveryDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("DeliveryDate");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Description");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("DueDate");

                    b.Property<DateTime>("FinishDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("FinishDate");

                    b.Property<string>("IssueType")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("IssueType");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Label");

                    b.Property<DateTime>("POReceiveDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("POReceiveDate");

                    b.Property<int>("ParentId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ParentId");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Priority");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("ProjectName");

                    b.Property<int>("Project_type")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Project_type");

                    b.Property<int>("ReportId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ReportId");

                    b.Property<string>("Stage")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Stage");

                    b.Property<int>("Starred")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Starred");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("StartDate");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Status");

                    b.Property<int>("TeamId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("TeamId");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("UpdateAt");

                    b.HasKey("ProjectId");

                    b.ToTable("project");
                });

            modelBuilder.Entity("ProjectManager.Models.Database.ProjectCategory", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("CategoryId");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("CategoryName");

                    b.HasKey("CategoryId");

                    b.ToTable("project_category");
                });

            modelBuilder.Entity("ProjectManager.Models.Database.ProjectComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<int>("CommentId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("CommentId");

                    b.Property<int>("ProjectId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ProjectId");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.ToTable("project_comment");
                });

            modelBuilder.Entity("ProjectManager.Models.Database.Projet_type", b =>
                {
                    b.Property<int>("TYPE_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("type_id");

                    b.Property<string>("PROJECT_TYPE")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Project_type");

                    b.Property<string>("TYPE_DESCRIPTION")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Type_description");

                    b.HasKey("TYPE_ID");

                    b.ToTable("Projet_type");
                });

            modelBuilder.Entity("ProjectManager.Models.Database.Report", b =>
                {
                    b.Property<int>("ReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("ReportId");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Path");

                    b.HasKey("ReportId");

                    b.ToTable("report");
                });

            modelBuilder.Entity("ProjectManager.Models.Database.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("Id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("roles");
                });

            modelBuilder.Entity("ProjectManager.Models.Database.RolePermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<int>("PermissionId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("PermissionId");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.ToTable("role_permission");
                });

            modelBuilder.Entity("ProjectManager.Models.Database.Status_conf", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("Id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Status");

                    b.HasKey("Id");

                    b.ToTable("Status_conf");
                });

            modelBuilder.Entity("ProjectManager.Models.Database.Team", b =>
                {
                    b.Property<int>("TeamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("TeamId");

                    b.Property<string>("TeamName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("TeamName");

                    b.HasKey("TeamId");

                    b.ToTable("team");
                });

            modelBuilder.Entity("ProjectManager.Models.Database.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("UserId");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Address");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("CreateAt");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Email");

                    b.Property<string>("EmployeeCode")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("EmployeeCode");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("FirstName");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("LastName");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Location");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Password");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Phone");

                    b.Property<int>("RoleId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("RoleId");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Status");

                    b.Property<int>("TeamId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("TeamId");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("UpdateAt");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("UserName");

                    b.HasKey("UserId");

                    b.ToTable("user");
                });

            modelBuilder.Entity("ProjectManager.Models.Database.UserAssign", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("AssignType")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Assign_type");

                    b.Property<int>("ProjectId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ProjectId");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.ToTable("user_assign");
                });
#pragma warning restore 612, 618
        }
    }
}
